name: Detect Release

permissions:
  contents: write

on:
  push:
    branches:
      - main

jobs:
  release-detection:
    name: Check for New Release
    runs-on: ubuntu-latest
    outputs:
      RELEASE: ${{ steps.check_release.outputs.RELEASE }}
      DEV_RELEASE: ${{ steps.check_dev_release.outputs.DEV_RELEASE }}
      MAJOR: ${{ steps.check_major.outputs.MAJOR }}
      MINOR: ${{ steps.check_minor.outputs.MINOR }}
      PATCH: ${{ steps.check_patch.outputs.PATCH }}
  
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4
  
      # Step 2: Check if the commit message contains "release"
      - name: Check if the commit message contains "release"
        id: check_release
        run: |
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          echo "Commit message: $COMMIT_MESSAGE"
          if [[ "$COMMIT_MESSAGE" == *"release"* ]]; then
            echo "RELEASE=true" >> $GITHUB_ENV
            echo "RELEASE=true" >> $GITHUB_OUTPUT
          else
            echo "RELEASE=false" >> $GITHUB_ENV
            echo "RELEASE=false" >> $GITHUB_OUTPUT
          fi
  
      # Step 3: Check if the commit message contains "dev-release"
      - name: Check if the commit message contains "dev-release"
        id: check_dev_release
        run: |
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          echo "Commit message: $COMMIT_MESSAGE"
          if [[ "$COMMIT_MESSAGE" == *"dev-release"* ]]; then
            echo "DEV_RELEASE=true" >> $GITHUB_ENV
            echo "DEV_RELEASE=true" >> $GITHUB_OUTPUT
          else
            echo "DEV_RELEASE=false" >> $GITHUB_ENV
            echo "DEV_RELEASE=false" >> $GITHUB_OUTPUT
          fi
  
      # Step 4: Check if the commit message contains "major"
      - name: Check if the commit message contains "major"
        id: check_major
        run: |
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          echo "Commit message: $COMMIT_MESSAGE"
          if [[ "$COMMIT_MESSAGE" == *"major"* ]]; then
            echo "MAJOR=true" >> $GITHUB_ENV
            echo "MAJOR=true" >> $GITHUB_OUTPUT
          else
            echo "MAJOR=false" >> $GITHUB_ENV
            echo "MAJOR=false" >> $GITHUB_OUTPUT
          fi
  
      # Step 5: Check if the commit message contains "minor"
      - name: Check if the commit message contains "minor"
        id: check_minor
        run: |
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          echo "Commit message: $COMMIT_MESSAGE"
          if [[ "$COMMIT_MESSAGE" == *"minor"* ]]; then
            echo "MINOR=true" >> $GITHUB_ENV
            echo "MINOR=true" >> $GITHUB_OUTPUT
          else
            echo "MINOR=false" >> $GITHUB_ENV
            echo "MINOR=false" >> $GITHUB_OUTPUT
          fi
  
      # Step 6: Check if the commit message contains "patch"
      - name: Check if the commit message contains "patch"
        id: check_patch
        run: |
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          echo "Commit message: $COMMIT_MESSAGE"
          if [[ "$COMMIT_MESSAGE" == *"patch"* ]]; then
            echo "PATCH=true" >> $GITHUB_ENV
            echo "PATCH=true" >> $GITHUB_OUTPUT
          else
            echo "PATCH=false" >> $GITHUB_ENV
            echo "PATCH=false" >> $GITHUB_OUTPUT
          fi

  approval:
    name: Wait for Approval
    if: ${{ needs.release-detection.outputs.RELEASE == 'true' || needs.release-detection.outputs.DEV_RELEASE == 'true' }}
    runs-on: ubuntu-latest
    needs: release-detection
    environment:
      name: production
      url: https://github.com/${{ github.repository }}
    steps:
      - name: Await Approval
        run: echo "Waiting for approval to proceed with the build."

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: release-detection
  
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Step 4: Build the ESP-IDF Project
      - name: Build ESP-IDF Project
        run: docker run --rm -v $GITHUB_WORKSPACE:/project -w /project -e HOME=/tmp jjsprandel/scan:v1.0 idf.py build
  
      # Step 7: Upload build artifacts for non-release pushes
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            build/SCAN.bin
            build/bootloader/bootloader.bin
            build/SCAN.elf
            build/SCAN.map
  
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [release-detection, approval, build]
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      # Step 2: Determine next version
      - name: Increment Version
        id: version
        run: |
          # Get the latest git tag (if none, set the base version)
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
  
          # Extract major, minor, and patch numbers
          VERSION=$(echo "$LATEST_TAG" | sed -e 's/^v//' -e 's/-.*//') # Remove prefix 'v' and dev suffix
          MAJOR=$(echo "$VERSION" | cut -d. -f1)
          MINOR=$(echo "$VERSION" | cut -d. -f2)
          PATCH=$(echo "$VERSION" | cut -d. -f3)
  
          # Check for release type
          if [[ "${{ needs.release-detection.outputs.MAJOR }}" == "true" ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "${{ needs.release-detection.outputs.MINOR }}" == "true" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ "${{ needs.release-detection.outputs.PATCH }}" == "true" ]]; then
            PATCH=$((PATCH + 1))
          fi
  
          # Determine if dev-release
          if [[ "${{ needs.release-detection.outputs.DEV_RELEASE }}" == "true" ]]; then
            NEW_VERSION="v$MAJOR.$MINOR.$PATCH-dev"
          else
            NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          fi
  
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "NEW_VERSION=$NEW_VERSION" # Output for debugging
  
      # Step 3: Tag the repository with the new version
      - name: Create and Push Tag
        if: ${{ needs.release-detection.outputs.RELEASE == 'true' || needs.release-detection.outputs.DEV_RELEASE == 'true' }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag $NEW_VERSION
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} $NEW_VERSION
      
          # Step 5: Upload Release Artifacts (for normal release)
      - name: Upload Release Artifacts
        if: ${{ needs.release-detection.outputs.RELEASE == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          files: |
            /home/runner/work/SCAN/SCAN/SCAN.bin
            /home/runner/work/SCAN/SCAN/bootloader/bootloader.bin
            /home/runner/work/SCAN/SCAN/SCAN.elf
            /home/runner/work/SCAN/SCAN/SCAN.map
          tag_name: ${{ env.NEW_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      # Step 6: Upload Dev Release Artifacts (for dev-release)
      - name: Upload Dev Release Artifacts
        if: ${{ needs.release-detection.outputs.DEV_RELEASE == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/**/*.bin
            build/*.elf
            build/*.map
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
